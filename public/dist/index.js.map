{"version":3,"sources":["/src/client/index.tsx","/src/client/components/MainFrame.tsx","/src/share/util.ts"],"names":[],"mappings":"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","file":"","sourcesContent":["\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport axios, {AxiosResponse} from \"axios\";\nimport MainFrame from \"./components/MainFrame\";\n\n\nwindow.onload = async () => {\n    console.log(\"hello!\");\n    const json = await axios.get(\"osusume.json\").catch(e => console.error(e)) as AxiosResponse;\n    console.dir(json.data);\n    ReactDOM.render((\n        <MainFrame dataArray={json.data} />\n    ),document.getElementById(\"root\"));\n};","import * as React from \"react\";\nimport axios, {AxiosResponse} from \"axios\";\nimport {css} from 'emotion'\nimport {CardInfo, ConnecTouchLink, OsusumeJson} from \"../../share/types\";\nimport {OsusumeGird} from \"./OsusumeGrid\";\nimport {Simulate} from \"react-dom/test-utils\";\nimport load = Simulate.load;\nimport {isKeyWordContained, sendMail} from \"../../share/util\";\n\nconst container = css({});\n\n/*アクセスするサーバー*/\nconst endpoint = \"http://192.168.0.200\";\n\n/*8番ラズパイのLinksを監視する*/\nconst observeReaderId = \"192.168.0.208\";\n/*JSONを保存して格納する*/\nconst osusumeList: Array<OsusumeJson> = [];\n\n/*取得したlinksをローカルの配列として保持する*/\nconst storedLinks: Array<ConnecTouchLink> = [];\n\n/*参加者情報のテーブルを取ってくる*/\nconst userInfoTable: Array<CardInfo> = [];\n\nclass MainFrame extends React.Component<{\n    dataArray: Array<OsusumeJson>\n}> {\n\n    constructor(props) {\n        super(props);\n        const {dataArray} = props;\n        this.state = {\n            dataArray: dataArray\n        }\n    }\n\n    /*おすすめリストを保持しておく関数*/\n    /*最初に実行する*/\n    storeOsusumeList = async () => {\n        Object.assign(osusumeList , this.props.dataArray);\n    };\n\n    /*参加者のプロフィールを取ってくる関数*/\n    getUserInfo = async () => {\n        const endPointUrl = `${endpoint}/info`;\n\n        const response = await axios.get(endPointUrl);\n        const infoLinks = response.data as Array<CardInfo>;\n\n        infoLinks.forEach(item => {\n            userInfoTable.push(item);\n        });\n    };\n\n    pollingLinks = async () => {\n        /*192.168.0.200/linksから紐付いたlinksを取得する*/\n        /*Paramsにidを追加しない場合全てのリーダーのイベントを取得できる*/\n        const endPointUrl = `${endpoint}/links?id=${observeReaderId}&limit=100`;\n        const request = await axios.get(endPointUrl);\n        const loadedLinks: Array<ConnecTouchLink> = request.data;\n        /*新しく追加されたLinksを求める*/\n        this.getDiff(storedLinks, loadedLinks);\n        /*ローカルの配列を新しい配列に上書きする*/\n        storedLinks.length = 0;\n        Object.assign(storedLinks, loadedLinks);\n    };\n\n    getDiff = (oldLinks: Array<ConnecTouchLink>, newLinks: Array<ConnecTouchLink>) => {\n        /*newLinksにあってoldLinksに無いものは新しいものとする*/\n        /*あるかないかの確認はmongoDBのレコードIdを元に行う*/\n        const oldIdArray = oldLinks.map(link => link._id.$oid);\n\n        /*レコードIdを元に存在しているかを真偽値で返す関数*/\n        const isContained = (link) => {\n            return oldIdArray.includes(link._id.$oid);\n        };\n\n        /*newLinksにあってoldLinksに無いものだけを集めた配列を作る*/\n        const diffLinks = newLinks.reduce((prev, curr) => {\n            if (!isContained(curr)) {\n                prev.push(curr)\n            }\n            return prev\n        }, []);\n\n        if (diffLinks.length != 0 && diffLinks.length < 2) {\n            console.log(`新しいタッチイベントが${diffLinks.length}件発生しました!`);\n            /*例えば自分が1番の場合は監視するフィルタも作れる*/\n            diffLinks.forEach(async link => {\n                /*リーダーIDが自分のIDと一致する場合*/\n                if (link.link[0] === observeReaderId) {\n                    console.log(`${link.link[1]}が私にタッチした!`);\n                    const filteredList = await this.filterList(link.link[1]);\n                    console.dir(filteredList);\n                    if (filteredList.length === 0) {\n                        /*推薦するものが無ければ特に何もしない*/\n                    } else {\n                        this.setState({dataArray:filteredList});\n                        console.dir(this.state);\n                        sendMail(\"user4@192.168.0.200\", \"テストです\", `${filteredList.toString()}`)\n                            .then(response => {\n                                if (response) {\n                                    console.log(\"メールの送信に成功しました!\");\n                                } else {\n                                    console.log(\"メールの送信に失敗しました...\");\n                                }\n                            })\n                            .catch(error => {\n                                console.error(error);\n                            });\n                    }\n                }\n            })\n        }\n\n    };\n\n    filterList = async (id: string): Promise<Array<OsusumeJson>> => {\n        const user = userInfoTable.find(item => {\n            return item.id === id\n        });\n\n        const userFavWords = user.keywords;\n        console.dir(userFavWords);\n\n        const filteredShopList: Array<OsusumeJson> = [];\n\n        osusumeList.forEach(async (item: OsusumeJson) => {\n            if (await isKeyWordContained(userFavWords, item.keywords)) {\n                console.log(`keyword detected! : ${item.title}`);\n                filteredShopList.push(item);\n            }\n        });\n\n        /*生成したものを返す*/\n        return new Promise((resolve, reject) => {\n            resolve(filteredShopList);\n        });\n    };\n\n    componentDidMount() {\n        /*オリジナルのOsusumeJsonを確保*/\n        this.storeOsusumeList();\n        /*参加者のプロフィールを取得する*/\n        this.getUserInfo();\n        setInterval(() => {\n            this.pollingLinks();\n        }, 1000);\n    }\n\n    render() {\n        return (\n            <div className={container}>\n                <h1>ConnecTouch Signage</h1>\n            </div>\n        );\n    }\n}\n\nexport default MainFrame;","import axios from \"axios\";\naxios.defaults.headers.post[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\naxios.defaults.headers.post[\"Access-Control-Allow-Origin\"] = \"*\";\n\n/*メールを送る関数*/\nconst sendMail = async (to: string, subject: string, body: string) : Promise<boolean> => {\n    return new Promise((resolve, reject) => {\n        axios.post(\"http://192.168.0.200/mail\",\n            {\n                to: to,\n                subject: subject,\n                body: body\n            })\n            .then( response => {\n                if (response.status === 200) {\n                    resolve(true);\n                } else {\n                    reject(false);\n                }\n            })\n            .catch( error => {\n                console.error(error);\n                reject(error);\n            })\n    });\n};\n\n/*利用者のkeywordsと店のkeywordsとの間で共通するものを返す関数*/\nconst isKeyWordContained = async (userWords: Array<string>, shopWords: Array<string>): Promise<boolean> => {\n    return new Promise((resolve, reject) => {\n        userWords.forEach(word => {\n            if (shopWords && shopWords.includes(word)) {\n                resolve(true);\n            }\n        });\n    });\n};\n\n\nexport { sendMail, isKeyWordContained }"]}